-- Drop existing tables if they exist to ensure a clean slate.
DROP TABLE IF EXISTS public.credit_transactions;
DROP TABLE IF EXISTS public.test_submissions;
DROP TABLE IF EXISTS public.tests;
DROP TABLE IF EXISTS public.profiles;

-- Drop existing function if it exists.
DROP FUNCTION IF EXISTS public.handle_new_user();
DROP FUNCTION IF EXISTS public.approve_submission_and_transfer_credits(integer, integer, uuid, uuid);


-- 1. Profiles Table
-- Stores public user information.
CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  full_name text,
  avatar_url text,
  bio text,
  skills jsonb,
  credits integer DEFAULT 0,
  reputation_score integer DEFAULT 0,
  PRIMARY KEY (id)
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Profiles
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- 2. Tests Table
-- Stores information about beta tests posted by users.
CREATE TABLE public.tests (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  title text NOT NULL,
  description text,
  category text,
  estimated_time integer,
  max_testers integer,
  reward_credits integer,
  instructions jsonb,
  proof_method text DEFAULT 'form', -- 'form' or 'manual'
  questions jsonb,
  status text DEFAULT 'open', -- 'open', 'closed', 'completed'
  created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.tests ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Tests
CREATE POLICY "Tests are viewable by authenticated users." ON public.tests FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can insert their own tests." ON public.tests FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own tests." ON public.tests FOR UPDATE TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- 3. Test Submissions Table
-- Stores submissions from testers for each test.
CREATE TABLE public.test_submissions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  test_id bigint NOT NULL REFERENCES public.tests ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  status text DEFAULT 'pending', -- 'pending', 'approved', 'rejected'
  feedback jsonb,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  UNIQUE(test_id, user_id) -- Ensures a user can only submit once per test
);
ALTER TABLE public.test_submissions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Test Submissions
CREATE POLICY "Users can view their own submissions." ON public.test_submissions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Posters can view submissions for their tests." ON public.test_submissions FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM public.tests
    WHERE tests.id = test_submissions.test_id AND tests.user_id = auth.uid()
  )
);
CREATE POLICY "Users can insert their own submissions." ON public.test_submissions FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Posters can update submission status." ON public.test_submissions FOR UPDATE TO authenticated USING (
  EXISTS (
    SELECT 1 FROM public.tests
    WHERE tests.id = test_submissions.test_id AND tests.user_id = auth.uid()
  )
);

-- 4. Credit Transactions Table
-- Logs all credit changes for auditing purposes.
CREATE TABLE public.credit_transactions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  amount integer NOT NULL,
  description text,
  test_id bigint REFERENCES public.tests ON DELETE SET NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.credit_transactions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Credit Transactions
CREATE POLICY "Users can view their own credit transactions." ON public.credit_transactions FOR SELECT USING (auth.uid() = user_id);


-- Function to create a profile for a new user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, credits, reputation_score)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', 20, 50);

  INSERT INTO public.credit_transactions(user_id, amount, description)
  VALUES (new.id, 20, 'Welcome bonus on signup');
  
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to execute the function on new user creation.
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();


-- Function for atomically approving a submission and transferring credits.
CREATE OR REPLACE FUNCTION public.approve_submission_and_transfer_credits(
    p_submission_id bigint,
    p_reward_amount integer,
    p_poster_id uuid,
    p_tester_id uuid
)
RETURNS void AS $$
DECLARE
    v_test_id bigint;
BEGIN
    -- Update submission status to 'approved'
    UPDATE public.test_submissions
    SET status = 'approved'
    WHERE id = p_submission_id
    RETURNING test_id INTO v_test_id;

    -- Deduct credits from the poster
    UPDATE public.profiles
    SET credits = credits - p_reward_amount
    WHERE id = p_poster_id;

    -- Add credits to the tester
    UPDATE public.profiles
    SET credits = credits + p_reward_amount
    WHERE id = p_tester_id;

    -- Log transaction for poster
    INSERT INTO public.credit_transactions (user_id, amount, description, test_id)
    VALUES (p_poster_id, -p_reward_amount, 'Paid for approved submission', v_test_id);

    -- Log transaction for tester
    INSERT INTO public.credit_transactions (user_id, amount, description, test_id)
    VALUES (p_tester_id, p_reward_amount, 'Reward for approved submission', v_test_id);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
