-- 1. Profiles Table
-- This table stores public user information.
create table if not exists public.profiles (
  id uuid not null primary key, -- UUID from auth.users
  full_name text,
  avatar_url text,
  bio text,
  skills text[],
  credits numeric not null default 0,
  reputation_score int not null default 50
);

-- Set up Row Level Security (RLS)
alter table public.profiles enable row level security;

-- Policy: Allow public read access
create policy "Public profiles are viewable by everyone." on public.profiles
  for select using (true);

-- Policy: Allow users to insert their own profile
create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

-- Policy: Allow users to update their own profile
create policy "Users can update their own profile." on public.profiles
  for update using (auth.uid() = id);

-- Trigger: Create a profile for new users
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url, credits, reputation_score)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', 20, 50);

  insert into public.credit_transactions(user_id, amount, description)
  values (new.id, 20, 'Welcome bonus on signup');
  
  return new;
end;
$$ language plpgsql security definer;

-- Drop existing trigger if it exists
drop trigger if exists on_auth_user_created on auth.users;

-- Create the trigger
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 2. Tests Table
-- This table stores the beta tests created by users.
create table if not exists public.tests (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles not null,
  title text not null,
  description text,
  category text,
  estimated_time int,
  reward_credits int not null,
  max_testers int not null,
  status text default 'open', -- e.g., 'open', 'closed', 'completed'
  instructions jsonb,
  questions jsonb,
  proof_method text default 'form', -- 'form' or 'manual'
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS for Tests
alter table public.tests enable row level security;
create policy "Tests are viewable by authenticated users." on public.tests
  for select using (auth.role() = 'authenticated');
create policy "Users can insert their own tests." on public.tests
  for insert with check (auth.uid() = user_id);
create policy "Users can update their own tests." on public.tests
  for update using (auth.uid() = user_id);


-- 3. Test Submissions Table
-- This table tracks which users have completed which tests.
create table if not exists public.test_submissions (
  id bigint generated by default as identity primary key,
  test_id bigint references public.tests not null,
  user_id uuid references public.profiles not null,
  status text default 'pending', -- 'pending', 'approved', 'rejected'
  feedback jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (test_id, user_id) -- Prevent duplicate submissions
);

-- RLS for Test Submissions
alter table public.test_submissions enable row level security;
create policy "Users can view their own submissions." on public.test_submissions
  for select using (auth.uid() = user_id);
create policy "Test posters can view submissions for their tests." on public.test_submissions
  for select using (exists (
    select 1 from tests where tests.id = test_submissions.test_id and tests.user_id = auth.uid()
  ));
create policy "Users can insert their own submissions." on public.test_submissions
  for insert with check (auth.uid() = user_id);
create policy "Test posters can update submission status for their tests." on public.test_submissions
  for update using (exists (
    select 1 from tests where tests.id = test_submissions.test_id and tests.user_id = auth.uid()
  ));

-- 4. Credit Transactions Table
-- Logs all credit movements for auditing purposes.
create table if not exists public.credit_transactions (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    amount int not null,
    description text,
    test_id bigint references public.tests,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS for Credit Transactions
alter table public.credit_transactions enable row level security;
create policy "Users can view their own credit transactions." on public.credit_transactions
  for select using (auth.uid() = user_id);


-- 5. Stored Procedure for Approving Submissions
-- This function handles the atomic transfer of credits upon submission approval.
create or replace function public.approve_submission_and_transfer_credits(
  p_submission_id bigint,
  p_reward_amount int,
  p_poster_id uuid,
  p_tester_id uuid
)
returns void as $$
begin
  -- Update submission status to 'approved'
  update public.test_submissions
  set status = 'approved'
  where id = p_submission_id;

  -- Add credits to the tester's profile
  update public.profiles
  set credits = credits + p_reward_amount
  where id = p_tester_id;

  -- Log the credit transaction for the tester (earning credits)
  insert into public.credit_transactions(user_id, amount, description, test_id)
  values (p_tester_id, p_reward_amount, 'Reward for test submission', (select test_id from test_submissions where id = p_submission_id));

  -- We don't deduct from the poster here, as credits were deducted when the test was posted.
  -- This function could be expanded to include poster deduction if the logic changes.

end;
$$ language plpgsql security definer;
