-- Create Profiles table
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  bio text,
  skills jsonb,
  credits integer default 20,
  reputation_score integer default 50
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile for new users.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url, bio, skills, credits, reputation_score)
  values (
    new.id, 
    new.raw_user_meta_data->>'full_name', 
    new.raw_user_meta_data->>'avatar_url',
    new.raw_user_meta_data->>'bio',
    (new.raw_user_meta_data->>'skills')::jsonb,
    (new.raw_user_meta_data->>'credits')::integer,
    (new.raw_user_meta_data->>'reputation_score')::integer
  );
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Create Tests table
create table tests (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    title text not null,
    description text,
    category text,
    estimated_time integer, -- in minutes
    max_testers integer,
    reward_credits integer not null,
    instructions jsonb,
    proof_method text default 'form', -- 'form' or 'manual'
    questions jsonb,
    status text default 'open', -- 'open', 'closed', 'in_progress'
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table tests enable row level security;
create policy "Tests are viewable by everyone." on tests for select using (true);
create policy "Users can insert their own tests." on tests for insert with check (auth.uid() = user_id);
create policy "Users can update their own tests." on tests for update with check (auth.uid() = user_id);
create policy "Users can delete their own tests." on tests for delete with check (auth.uid() = user_id);


-- Create Test Submissions table
create table test_submissions (
    id bigint generated by default as identity primary key,
    test_id bigint references public.tests not null,
    user_id uuid references public.profiles not null,
    status text default 'pending', -- 'pending', 'approved', 'rejected'
    feedback jsonb,
    proof_url text, -- for manual uploads
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    unique(test_id, user_id)
);

alter table test_submissions enable row level security;
create policy "Submissions are viewable by poster and submitter." on test_submissions for select using (auth.uid() = user_id or exists (select 1 from tests where tests.id = test_submissions.test_id and tests.user_id = auth.uid()));
create policy "Users can insert submissions." on test_submissions for insert with check (auth.uid() = user_id);
create policy "Posters can update submission status." on test_submissions for update using (exists (select 1 from tests where tests.id = test_submissions.test_id and tests.user_id = auth.uid()));


-- Create Credit Transactions table
create table credit_transactions (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    amount integer not null,
    description text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    submission_id bigint references public.test_submissions -- link to submission if applicable
);
alter table credit_transactions enable row level security;
create policy "Users can view their own transactions." on credit_transactions for select using (auth.uid() = user_id);
create policy "System can insert transactions." on credit_transactions for insert with check (true); -- Should be more restrictive in prod


-- Function to transfer credits
create function transfer_credits(
    from_user_id uuid,
    to_user_id uuid,
    amount_to_transfer integer,
    submission_id bigint
)
returns void as $$
begin
    -- Deduct from sender
    update public.profiles
    set credits = credits - amount_to_transfer
    where id = from_user_id;

    -- Add to receiver
    update public.profiles
    set credits = credits + amount_to_transfer
    where id = to_user_id;

    -- Log transaction for sender
    insert into public.credit_transactions(user_id, amount, description, submission_id)
    values(from_user_id, -amount_to_transfer, 'Test reward paid', submission_id);

    -- Log transaction for receiver
    insert into public.credit_transactions(user_id, amount, description, submission_id)
    values(to_user_id, amount_to_transfer, 'Test reward received', submission_id);
end;
$$ language plpgsql security definer;


-- Function to approve submission and transfer credits
create function approve_submission(submission_id_to_approve bigint)
returns void as $$
declare
    submission record;
    test_record record;
begin
    -- Get submission details
    select * into submission
    from public.test_submissions
    where id = submission_id_to_approve;

    -- Get test details
    select * into test_record
    from public.tests
    where id = submission.test_id;

    -- Check if the current user is the poster of the test
    if test_record.user_id != auth.uid() then
        raise exception 'Only the test poster can approve submissions.';
    end if;

    -- Update submission status
    update public.test_submissions
    set status = 'approved'
    where id = submission_id_to_approve;

    -- Transfer credits
    perform transfer_credits(
        test_record.user_id,
        submission.user_id,
        test_record.reward_credits,
        submission_id_to_approve
    );
end;
$$ language plpgsql security definer;
