-- Create a table for public user profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  bio text,
  skills jsonb,
  reputation_score integer,
  credits integer
);

alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- This trigger automatically creates a profile entry when a new user signs up.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url, bio, skills, reputation_score, credits)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    new.raw_user_meta_data->>'bio',
    (new.raw_user_meta_data->>'skills')::jsonb,
    (new.raw_user_meta_data->>'reputation_score')::integer,
    (new.raw_user_meta_data->>'credits')::integer
  );
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Table for tests
create table tests (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles not null,
  title text not null,
  description text,
  category text,
  estimated_time integer,
  reward_credits integer not null,
  max_testers integer,
  status text default 'open', -- open, closed, in_progress
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  instructions jsonb, -- Checklist for testers
  demo_video_url text,
  proof_method text, -- 'form' or 'manual'
  questions jsonb
);

alter table tests
  enable row level security;

create policy "Tests are viewable by authenticated users." on tests
  for select to authenticated using (true);

create policy "Users can insert their own tests." on tests
  for insert to authenticated with check (auth.uid() = user_id);

create policy "Users can update their own tests." on tests
  for update to authenticated using (auth.uid() = user_id);

-- Table for test submissions
create table test_submissions (
    id bigint generated by default as identity primary key,
    test_id bigint references tests not null,
    user_id uuid references public.profiles not null,
    status text default 'pending', -- pending, approved, rejected
    feedback jsonb, -- answers to questions
    file_uploads jsonb, -- array of urls for screenshots/videos
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table test_submissions
  enable row level security;

create policy "Users can see their own submissions." on test_submissions
  for select to authenticated using (auth.uid() = user_id);

create policy "Test posters can see submissions for their tests." on test_submissions
  for select to authenticated using (exists (select 1 from tests where tests.id = test_submissions.test_id and tests.user_id = auth.uid()));

create policy "Users can insert submissions for tests." on test_submissions
  for insert to authenticated with check (auth.uid() = user_id);

create policy "Posters can update submission status." on test_submissions
    for update to authenticated using (exists (select 1 from tests where tests.id = test_submissions.test_id and tests.user_id = auth.uid()));


-- Table for credit transactions
create table credit_transactions (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles not null,
    amount integer not null, -- positive for earning, negative for spending
    description text,
    related_test_id bigint references tests,
    related_submission_id bigint references test_submissions,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table credit_transactions
  enable row level security;

create policy "Users can see their own credit transactions." on credit_transactions
  for select to authenticated using (auth.uid() = user_id);

create policy "Users can insert their own credit transactions." on credit_transactions
  for insert to authenticated with check (auth.uid() = user_id);

-- RPC to transfer credits
create or replace function transfer_credits(
    from_user_id uuid,
    to_user_id uuid,
    amount_to_transfer integer,
    submission_id bigint
)
returns void as $$
begin
    -- Deduct credits from poster
    update public.profiles
    set credits = credits - amount_to_transfer
    where id = from_user_id;

    -- Add credits to tester
    update public.profiles
    set credits = credits + amount_to_transfer
    where id = to_user_id;

    -- Log transaction for poster
    insert into public.credit_transactions (user_id, amount, description, related_submission_id)
    values (from_user_id, -amount_to_transfer, 'Reward for approved submission', submission_id);

    -- Log transaction for tester
    insert into public.credit_transactions (user_id, amount, description, related_submission_id)
    values (to_user_id, amount_to_transfer, 'Reward for approved submission', submission_id);
end;
$$ language plpgsql;
